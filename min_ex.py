# -*- coding: utf-8 -*-
"""min_ex

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vzwesT01NgEuQ6KtNVXSBCxXLPzWcBRP
"""

from sklearn.preprocessing import MinMaxScaler
import pandas as pd
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import csv
from sklearn.metrics import mean_absolute_percentage_error as mape
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error as mse
lag_max=20

def norm(data):
  for i in range(1,data.shape[0]-1):
    data['Open'][i]=(data['Open'][i-1]+data['Open'][i+1])/2
  return data

df=pd.read_csv('eur_rub_min.csv')
df['Datetime']=df['Date']+"."+df['Time']
df['Datetime']=pd.to_datetime(df['Datetime'],format="%d/%m/%Y.%H:%M:%S")
df=df.set_index('Datetime')
df=df.drop('Date',axis=1)
df=df.drop('Time',axis=1)
df=df.drop('Vol',axis=1)
df=df.drop('Close',axis=1)
df=df.drop('High',axis=1)
df=df.drop('Low',axis=1)

df1=df[-2140:-700]
df1=norm(df1)
df1=norm(df1)

df1

df2=df1.copy()
for lag_num in range(1,lag_max,2):
  df2["Open_lag_{}".format(lag_num)] = df2['Open'].shift(lag_num)
df2.dropna(inplace=True)

from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor
from sklearn.svm import SVR
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_log_error

scaler = StandardScaler()
X = np.array(df2.drop(['Open'], 1))
scaler.fit(X)
X = scaler.transform(X)

X_Predictions = X[-1:]
X = X[:-1]

y = np.array(df2['Open'])

y_predictions=y[-1:]
y=y[:-1]

from sklearn.metrics import mean_absolute_error

lr = GradientBoostingRegressor(random_state=60)
lr.fit(X,y)
pred=lr.predict(X_Predictions)
lr_mae=mean_absolute_error(y_predictions,pred)
print(pred,lr_mae)

idx = pd.date_range('2022-11-29 11:01:00', periods=1, freq='T')
df1=df1.append(df1[-1:].reindex(idx))

df1['Open'][-1]=pred

df1

name='GradientBoostingRegressor'

plt.rc('figure', figsize=(20, 8))
plt.plot(df[-700:-640].index, df[-700:-640]['Open'], label = "Test")
plt.plot(df1[-60:].index,df1[-60:]['Open'] , lw=5, label = "Prediction")
plt.grid()
plt.title(f"{name}", fontsize = 20)
plt.xlabel('Дата', fontsize=15)
plt.ylabel("Цена", fontsize=15)
plt.legend(prop={'size': 20})
plt.show()

mean=mean_absolute_error(df[-700:-640]['Open'],df1[-60:]['Open'])
print(mean)